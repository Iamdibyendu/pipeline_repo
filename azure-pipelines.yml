trigger: none

parameters:
  - name: runInit
    displayName: '✅ Run Terraform Init?'
    type: boolean
    default: true

  - name: runValidate
    displayName: '✅ Run Terraform Validate?'
    type: boolean
    default: true

  - name: runPlan
    displayName: '✅ Run Terraform Plan?'
    type: boolean
    default: true

  - name: runApply
    displayName: '✅ Run Terraform Apply?'
    type: boolean
    default: false  # Keep apply false by default for safety

variables:
  backendstoragename: 'dibstorage'
  backendservicename: 'Dibyo_svp_new'

jobs:

# ✅ Terraform Init Job
- ${{ if eq(parameters.runInit, true) }}:
  - job: TerraformInit
    displayName: 'Terraform Init'
    pool:
      name: MyAgentpools1
    steps:
      - task: TerraformInstaller@1
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: 'latest'

      - task: TerraformTask@5
        displayName: 'Terraform Init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: '$(backendservicename)'
          backendAzureRmStorageAccountName: '$(backendstoragename)'
          backendAzureRmContainerName: 'dibcontainer'
          backendAzureRmKey: 'newdib.tfstate'

# ✅ Terraform Validate Job
- ${{ if eq(parameters.runValidate, true) }}:
  - job: TerraformValidate
    displayName: 'Terraform Validate'
    pool:
      name: MyAgentpools1
    steps:
      - task: TerraformInstaller@1
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: 'latest'

      - task: TerraformTask@5
        displayName: 'Terraform Validate'
        inputs:
          provider: 'azurerm'
          command: 'validate'

# ✅ Terraform Plan Job
- ${{ if eq(parameters.runPlan, true) }}:
  - job: TerraformPlan
    displayName: 'Terraform Plan'
    pool:
      name: MyAgentpools1
    steps:
      - task: TerraformInstaller@1
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: 'latest'

      - task: TerraformTask@5
        displayName: 'Terraform Plan'
        inputs:
          provider: 'azurerm'
          command: 'plan'
          environmentServiceNameAzureRM: '$(backendservicename)'

# ✅ Terraform Apply Job
- ${{ if eq(parameters.runApply, true) }}:
  - job: TerraformApply
    displayName: 'Terraform Apply'
    pool:
      name: MyAgentpools1
    steps:
      - task: TerraformInstaller@1
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: 'latest'

      - task: TerraformTask@5
        displayName: 'Terraform Apply'
        inputs:
          provider: 'azurerm'
          command: 'apply'
          environmentServiceNameAzureRM: '$(backendservicename)'
