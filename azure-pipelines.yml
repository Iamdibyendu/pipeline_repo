trigger: none

parameters:
  - name: runInit
    displayName: '✅ Run Terraform Init?'
    type: boolean
    default: true

  - name: runValidate
    displayName: '✅ Run Terraform Validate?'
    type: boolean
    default: true

  - name: runPlan
    displayName: '✅ Run Terraform Plan?'
    type: boolean
    default: true

  - name: runApply
    displayName: '✅ Run Terraform Apply?'
    type: boolean
    default: false  # Keep apply false by default for safety

variables:
  backendstoragename: 'dibstorage'
  backendservicename: 'Dibyo_svp_new'

pool: MyAgentpools1

steps:

- task: TerraformInstaller@1
  displayName: 'Install Terraform'
  inputs:
    terraformVersion: 'latest'

# ✅ Terraform Init
- ${{ if eq(parameters.runInit, true) }}:
  - task: TerraformTask@5
    displayName: 'Terraform Init'
    inputs:
      provider: 'azurerm'
      command: 'init'
      backendServiceArm: '$(backendservicename)'
      backendAzureRmStorageAccountName: '$(backendstoragename)'
      backendAzureRmContainerName: 'dibcontainer'
      backendAzureRmKey: 'newdib.tfstate'

# ✅ Terraform Validate
- ${{ if eq(parameters.runValidate, true) }}:
  - task: TerraformTask@5
    displayName: 'Terraform Validate'
    inputs:
      provider: 'azurerm'
      command: 'validate'

# ✅ Terraform Plan
- ${{ if eq(parameters.runPlan, true) }}:
  - task: TerraformTask@5
    displayName: 'Terraform Plan'
    inputs:
      provider: 'azurerm'
      command: 'plan'
      environmentServiceNameAzureRM: '$(backendservicename)'

# ✅ Terraform Apply
- ${{ if eq(parameters.runApply, true) }}:
  - task: TerraformTask@5
    displayName: 'Terraform Apply'
    inputs:
      provider: 'azurerm'
      command: 'apply'
      environmentServiceNameAzureRM: '$(backendservicename)'
